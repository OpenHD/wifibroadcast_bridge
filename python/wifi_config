#!/usr/bin/env python3

import enum
import configparser
import os
import logging
import logging.handlers
import signal
import sys
import time
import pyudev as udev

import pyric
import pyric.pyw as pyw
import pyric.utils.hardware as pywhw

class Card(enum.Enum):
    ath9k = 1
    rtl88xx = 2

module_name_mappings = {
    "rtl8812au": "rtl88xxau",
    "rtl88xxau": "rtl88xxau",
    "88XXau": "rtl88xxau",
    "ath9k_htc": "ath9k_htc"
}

# Setup some paths based on the directory that this script was run frum.
root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Add the python directory to the python path
python_dir = os.path.join(root_dir, "lib/python" + str(sys.version_info.major) + \
                          "." + str(sys.version_info.minor) + "/site-packages")
sys.path.append(python_dir)

config_filename = os.path.join(root_dir, "etc/default/wfb_config")
if not os.path.exists(config_filename):
    config_filename = os.path.join(os.path.dirname(root_dir), "etc/default/wfb_bridge")

udev_context = udev.Context()

def handler(signum, frame):
    """Re-read the configuration file on a SIGHUP signal"""
    if signum == signal.SIGHUP:
        logging.info("Received a SIGHUP - reloading configuration")
        net.reload_config(config_filename)

class Network(object):
    """Create and control monitor mode wifi interfaces"""

    def __init__(self):
        self.m_devices = []

    def read_config(self, filename):
        """ Read the configuration file """
        self.config_filename = filename
        self.m_config = configparser.ConfigParser()
        self.m_config['global'] = {
            'frequency': '2412',
            'txpower': '40',
            'bitrate': '11',
            'loglevel': 'debug',
            'syslog_level': 'debug',
            'mcs': '0',
            'stbc': '0',
            'ldpc': '0'
        }
        try:
            self.m_config.read(filename)
        except:
            logging.error("Error reading the configuration file: ", filename)
            exit

        # Configure the logger
        loglevel = getattr(logging, self.m_config['global'].get('loglevel').upper())
        syslog_level = getattr(logging, self.m_config['global'].get('syslog_level').upper())
        if not isinstance(loglevel, int):
            print("Invalid log level: %s - setting to info" % (args.loglevel))
            loglevel = logging.INFO
        if not isinstance(syslog_level, int):
            print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
            syslog_level = logging.INFO
        logger = logging.getLogger('wifi_config')
        stream_handler = logging.StreamHandler()
        stream_handler.setLevel(loglevel)
        syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
        syslog_handler.setLevel(syslog_level)
        logging.basicConfig(level=min(loglevel, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                            datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

        # Configure the reload signal handler
        signal.signal(signal.SIGHUP, handler)

    def reload_config(self, filename):
        logging.debug("Reload config called")

        # Re-read the configuration file
        self.read_config(self.config_filename)

        # Re-configure all the interfaces
        for iface in net.monitor_interfaces():
            logging.info("Reconfiguring interface: " + iface)
            net.configure_interface(iface)

    def supports_monitor(self, device_name):
        """ Check if this card support monitor mode """
        try:
            card = pyw.getcard(device_name)
            if 'monitor' in pyw.devmodes(card):
                return device_name
            return True

        except pyric.error as e:
            return False

    def monitor_interfaces(self):
        """Get a list of interfaces that support monitor mode"""

        # Get a list of all the interfaces.
        ret = []
        for iface in pyw.interfaces():
            if self.supports_monitor(iface):
                # Add the card to the list
                ret.append(iface)

        # Return the collected list
        return ret

    def configure_interface(self, interface):
        """Configure the given card in monitor mode"""

        # See if this device has been unplugged
        if interface in self.m_devices:
            try:
                card = pyw.getcard(device_name)
            except:
                logging.debug("Removing: " + interface)
                self.m_devices.remove(interface)
                return None

        # Determine the type of card for this interface
        try:
            driver = pywhw.ifcard(interface)[0]
            logging.info("Found wifi card with driver: %s" % (driver))
        except Exception as e:
            logging.error("Error creating the interface for: %s" % (driver))
            return None


        # Try to load the python module for configuring this device type
        # If the module doesn't exist, the card is not supported
        if driver not in module_name_mappings:
            logging.debug("Unable to load find name mapping for driver: %s" % (driver))
            return None
        module_name = module_name_mappings[driver]
        try:
            module = __import__('wifibroadcast', globals(), locals(), [module_name])
            submodule = getattr(module, module_name)
            class_ = getattr(submodule, module_name)
            driver = class_(interface)
        except Exception as e:
            logging.debug("Unable to load module for driver: %s" % (driver))
            logging.debug(e)
            return None
        logging.info("Found driver of type: %s" % (module_name))

        # Retrieve the configuration file
        config_group = 'device-' + module_name
        frequency = self.m_config[config_group].getint('frequency', 0)
        if frequency == 0:
            frequency = self.m_config['global'].getint('frequency', 0)
        txpower = self.m_config[config_group].getint('txpower', 0)
        if txpower == 0:
            txpower = self.m_config['global'].getint('txpower', 0)
        bitrate = self.m_config[config_group].getfloat('bitrate', 0)
        if bitrate == 0:
            bitrate = self.m_config['global'].getfloat('bitrate', 0)
        mcs  = self.m_config[config_group].getfloat('mcs', 0)
        if mcs == 0:
            mcs = self.m_config['global'].getfloat('mcs', 0)
        stbc  = self.m_config[config_group].getfloat('stbc', 0)
        if stbc == 0:
            stbc = self.m_config['global'].getfloat('stbc', 0)
        ldpc  = self.m_config[config_group].getfloat('ldpc', 0)
        if ldpc == 0:
            ldpc = self.m_config['global'].getfloat('ldpc', 0)

        # Get the card for this interface
        try:
            card = pyw.getcard(interface)
        except pyric.error as e:
            logging.error("Error connecting to the interface: " + interface)
            return None

        # Configure this card
        logging.info("Configuring %s to %d and txpower=%d, bitrate=%f" %
                     (interface, frequency, txpower, bitrate))
        add = driver.configure(interface, frequency, txpower, bitrate, mcs, stbc, ldpc)
        logging.info("Configured: %s" % (interface))

        # Add this to the list of interfaces
        if add:
            self.m_devices.append(interface)

        # Reload the wfb_bridge process just in case we changed it's configuration
        os.system("systemctl reload wfb_bridge")

        return card

    def is_configured(self, interface):
        return interface in self.m_devices

net = Network()
net.read_config(config_filename)

# Configure any existing devices
for iface in net.monitor_interfaces():
    net.configure_interface(iface)

# Monitor for any network adapters getiting plugged in or unplugged
monitor = udev.Monitor.from_netlink(udev_context)
monitor.filter_by('net')
for device in iter(monitor.poll, None):
    net.configure_interface(device.sys_name)
